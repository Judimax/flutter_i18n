// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_i18n/test/flutter_i18n_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i2;

import 'package:flutter/widgets.dart' as _i3;
import 'package:flutter_i18n/loaders/decoders/base_decode_strategy.dart' as _i8;
import 'package:flutter_i18n/loaders/file_translation_loader.dart' as _i6;
import 'package:flutter_i18n/loaders/namespace_file_translation_loader.dart'
    as _i9;
import 'package:flutter_i18n/loaders/network_file_translation_loader.dart'
    as _i10;
import 'package:flutter_i18n/loaders/translation_loader.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocale_0 extends _i1.SmartFake implements _i2.Locale {
  _FakeLocale_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAssetBundle_1 extends _i1.SmartFake implements _i3.AssetBundle {
  _FakeAssetBundle_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_2 extends _i1.SmartFake implements Uri {
  _FakeUri_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TranslationLoader].
///
/// See the documentation for Mockito's code generation for more information.
class MockTranslationLoader extends _i1.Mock implements _i4.TranslationLoader {
  @override
  set forcedLocale(_i2.Locale? forcedLocale) => super.noSuchMethod(
        Invocation.setter(
          #forcedLocale,
          forcedLocale,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set locale(_i2.Locale? locale) => super.noSuchMethod(
        Invocation.setter(
          #locale,
          locale,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<Map<dynamic, dynamic>> load() => (super.noSuchMethod(
        Invocation.method(
          #load,
          [],
        ),
        returnValue:
            _i5.Future<Map<dynamic, dynamic>>.value(<dynamic, dynamic>{}),
        returnValueForMissingStub:
            _i5.Future<Map<dynamic, dynamic>>.value(<dynamic, dynamic>{}),
      ) as _i5.Future<Map<dynamic, dynamic>>);

  @override
  _i5.Future<_i2.Locale> findDeviceLocale() => (super.noSuchMethod(
        Invocation.method(
          #findDeviceLocale,
          [],
        ),
        returnValue: _i5.Future<_i2.Locale>.value(_FakeLocale_0(
          this,
          Invocation.method(
            #findDeviceLocale,
            [],
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i2.Locale>.value(_FakeLocale_0(
          this,
          Invocation.method(
            #findDeviceLocale,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Locale>);
}

/// A class which mocks [FileTranslationLoader].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileTranslationLoader extends _i1.Mock
    implements _i6.FileTranslationLoader {
  @override
  String get fallbackFile => (super.noSuchMethod(
        Invocation.getter(#fallbackFile),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#fallbackFile),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#fallbackFile),
        ),
      ) as String);

  @override
  String get basePath => (super.noSuchMethod(
        Invocation.getter(#basePath),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#basePath),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#basePath),
        ),
      ) as String);

  @override
  bool get useCountryCode => (super.noSuchMethod(
        Invocation.getter(#useCountryCode),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get useScriptCode => (super.noSuchMethod(
        Invocation.getter(#useScriptCode),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i3.AssetBundle get assetBundle => (super.noSuchMethod(
        Invocation.getter(#assetBundle),
        returnValue: _FakeAssetBundle_1(
          this,
          Invocation.getter(#assetBundle),
        ),
        returnValueForMissingStub: _FakeAssetBundle_1(
          this,
          Invocation.getter(#assetBundle),
        ),
      ) as _i3.AssetBundle);

  @override
  set assetBundle(_i3.AssetBundle? _assetBundle) => super.noSuchMethod(
        Invocation.setter(
          #assetBundle,
          _assetBundle,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set decodeStrategies(List<_i8.BaseDecodeStrategy>? decodeStrategies) =>
      super.noSuchMethod(
        Invocation.setter(
          #decodeStrategies,
          decodeStrategies,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set forcedLocale(_i2.Locale? forcedLocale) => super.noSuchMethod(
        Invocation.setter(
          #forcedLocale,
          forcedLocale,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set locale(_i2.Locale? locale) => super.noSuchMethod(
        Invocation.setter(
          #locale,
          locale,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<Map<dynamic, dynamic>> load() => (super.noSuchMethod(
        Invocation.method(
          #load,
          [],
        ),
        returnValue:
            _i5.Future<Map<dynamic, dynamic>>.value(<dynamic, dynamic>{}),
        returnValueForMissingStub:
            _i5.Future<Map<dynamic, dynamic>>.value(<dynamic, dynamic>{}),
      ) as _i5.Future<Map<dynamic, dynamic>>);

  @override
  _i5.Future<String> loadString(
    String? fileName,
    String? extension,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadString,
          [
            fileName,
            extension,
          ],
        ),
        returnValue: _i5.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #loadString,
            [
              fileName,
              extension,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #loadString,
            [
              fileName,
              extension,
            ],
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<Map<dynamic, dynamic>> loadFile(String? fileName) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadFile,
          [fileName],
        ),
        returnValue:
            _i5.Future<Map<dynamic, dynamic>>.value(<dynamic, dynamic>{}),
        returnValueForMissingStub:
            _i5.Future<Map<dynamic, dynamic>>.value(<dynamic, dynamic>{}),
      ) as _i5.Future<Map<dynamic, dynamic>>);

  @override
  String composeFileName() => (super.noSuchMethod(
        Invocation.method(
          #composeFileName,
          [],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #composeFileName,
            [],
          ),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #composeFileName,
            [],
          ),
        ),
      ) as String);

  @override
  _i5.Future<_i2.Locale> findDeviceLocale() => (super.noSuchMethod(
        Invocation.method(
          #findDeviceLocale,
          [],
        ),
        returnValue: _i5.Future<_i2.Locale>.value(_FakeLocale_0(
          this,
          Invocation.method(
            #findDeviceLocale,
            [],
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i2.Locale>.value(_FakeLocale_0(
          this,
          Invocation.method(
            #findDeviceLocale,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Locale>);
}

/// A class which mocks [NamespaceFileTranslationLoader].
///
/// See the documentation for Mockito's code generation for more information.
class MockNamespaceFileTranslationLoader extends _i1.Mock
    implements _i9.NamespaceFileTranslationLoader {
  @override
  String get fallbackDir => (super.noSuchMethod(
        Invocation.getter(#fallbackDir),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#fallbackDir),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#fallbackDir),
        ),
      ) as String);

  @override
  String get basePath => (super.noSuchMethod(
        Invocation.getter(#basePath),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#basePath),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#basePath),
        ),
      ) as String);

  @override
  bool get useCountryCode => (super.noSuchMethod(
        Invocation.getter(#useCountryCode),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get useScriptCode => (super.noSuchMethod(
        Invocation.getter(#useScriptCode),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i3.AssetBundle get assetBundle => (super.noSuchMethod(
        Invocation.getter(#assetBundle),
        returnValue: _FakeAssetBundle_1(
          this,
          Invocation.getter(#assetBundle),
        ),
        returnValueForMissingStub: _FakeAssetBundle_1(
          this,
          Invocation.getter(#assetBundle),
        ),
      ) as _i3.AssetBundle);

  @override
  set assetBundle(_i3.AssetBundle? _assetBundle) => super.noSuchMethod(
        Invocation.setter(
          #assetBundle,
          _assetBundle,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get fallbackFile => (super.noSuchMethod(
        Invocation.getter(#fallbackFile),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#fallbackFile),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#fallbackFile),
        ),
      ) as String);

  @override
  set decodeStrategies(List<_i8.BaseDecodeStrategy>? decodeStrategies) =>
      super.noSuchMethod(
        Invocation.setter(
          #decodeStrategies,
          decodeStrategies,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set forcedLocale(_i2.Locale? forcedLocale) => super.noSuchMethod(
        Invocation.setter(
          #forcedLocale,
          forcedLocale,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set locale(_i2.Locale? locale) => super.noSuchMethod(
        Invocation.setter(
          #locale,
          locale,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<Map<dynamic, dynamic>> load() => (super.noSuchMethod(
        Invocation.method(
          #load,
          [],
        ),
        returnValue:
            _i5.Future<Map<dynamic, dynamic>>.value(<dynamic, dynamic>{}),
        returnValueForMissingStub:
            _i5.Future<Map<dynamic, dynamic>>.value(<dynamic, dynamic>{}),
      ) as _i5.Future<Map<dynamic, dynamic>>);

  @override
  _i5.Future<String> loadString(
    String? fileName,
    String? extension,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadString,
          [
            fileName,
            extension,
          ],
        ),
        returnValue: _i5.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #loadString,
            [
              fileName,
              extension,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #loadString,
            [
              fileName,
              extension,
            ],
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<Map<dynamic, dynamic>> loadFile(String? fileName) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadFile,
          [fileName],
        ),
        returnValue:
            _i5.Future<Map<dynamic, dynamic>>.value(<dynamic, dynamic>{}),
        returnValueForMissingStub:
            _i5.Future<Map<dynamic, dynamic>>.value(<dynamic, dynamic>{}),
      ) as _i5.Future<Map<dynamic, dynamic>>);

  @override
  String composeFileName() => (super.noSuchMethod(
        Invocation.method(
          #composeFileName,
          [],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #composeFileName,
            [],
          ),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #composeFileName,
            [],
          ),
        ),
      ) as String);

  @override
  _i5.Future<_i2.Locale> findDeviceLocale() => (super.noSuchMethod(
        Invocation.method(
          #findDeviceLocale,
          [],
        ),
        returnValue: _i5.Future<_i2.Locale>.value(_FakeLocale_0(
          this,
          Invocation.method(
            #findDeviceLocale,
            [],
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i2.Locale>.value(_FakeLocale_0(
          this,
          Invocation.method(
            #findDeviceLocale,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Locale>);
}

/// A class which mocks [NetworkFileTranslationLoader].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkFileTranslationLoader extends _i1.Mock
    implements _i10.NetworkFileTranslationLoader {
  @override
  Uri get baseUri => (super.noSuchMethod(
        Invocation.getter(#baseUri),
        returnValue: _FakeUri_2(
          this,
          Invocation.getter(#baseUri),
        ),
        returnValueForMissingStub: _FakeUri_2(
          this,
          Invocation.getter(#baseUri),
        ),
      ) as Uri);

  @override
  String get fallbackFile => (super.noSuchMethod(
        Invocation.getter(#fallbackFile),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#fallbackFile),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#fallbackFile),
        ),
      ) as String);

  @override
  String get basePath => (super.noSuchMethod(
        Invocation.getter(#basePath),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#basePath),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.getter(#basePath),
        ),
      ) as String);

  @override
  bool get useCountryCode => (super.noSuchMethod(
        Invocation.getter(#useCountryCode),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get useScriptCode => (super.noSuchMethod(
        Invocation.getter(#useScriptCode),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i3.AssetBundle get assetBundle => (super.noSuchMethod(
        Invocation.getter(#assetBundle),
        returnValue: _FakeAssetBundle_1(
          this,
          Invocation.getter(#assetBundle),
        ),
        returnValueForMissingStub: _FakeAssetBundle_1(
          this,
          Invocation.getter(#assetBundle),
        ),
      ) as _i3.AssetBundle);

  @override
  set assetBundle(_i3.AssetBundle? _assetBundle) => super.noSuchMethod(
        Invocation.setter(
          #assetBundle,
          _assetBundle,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set decodeStrategies(List<_i8.BaseDecodeStrategy>? decodeStrategies) =>
      super.noSuchMethod(
        Invocation.setter(
          #decodeStrategies,
          decodeStrategies,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set forcedLocale(_i2.Locale? forcedLocale) => super.noSuchMethod(
        Invocation.setter(
          #forcedLocale,
          forcedLocale,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set locale(_i2.Locale? locale) => super.noSuchMethod(
        Invocation.setter(
          #locale,
          locale,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<String> loadString(
    String? fileName,
    String? extension,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadString,
          [
            fileName,
            extension,
          ],
        ),
        returnValue: _i5.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #loadString,
            [
              fileName,
              extension,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<String>.value(_i7.dummyValue<String>(
          this,
          Invocation.method(
            #loadString,
            [
              fileName,
              extension,
            ],
          ),
        )),
      ) as _i5.Future<String>);

  @override
  Uri resolveUri(
    String? fileName,
    String? extension,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #resolveUri,
          [
            fileName,
            extension,
          ],
        ),
        returnValue: _FakeUri_2(
          this,
          Invocation.method(
            #resolveUri,
            [
              fileName,
              extension,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeUri_2(
          this,
          Invocation.method(
            #resolveUri,
            [
              fileName,
              extension,
            ],
          ),
        ),
      ) as Uri);

  @override
  _i5.Future<Map<dynamic, dynamic>> load() => (super.noSuchMethod(
        Invocation.method(
          #load,
          [],
        ),
        returnValue:
            _i5.Future<Map<dynamic, dynamic>>.value(<dynamic, dynamic>{}),
        returnValueForMissingStub:
            _i5.Future<Map<dynamic, dynamic>>.value(<dynamic, dynamic>{}),
      ) as _i5.Future<Map<dynamic, dynamic>>);

  @override
  _i5.Future<Map<dynamic, dynamic>> loadFile(String? fileName) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadFile,
          [fileName],
        ),
        returnValue:
            _i5.Future<Map<dynamic, dynamic>>.value(<dynamic, dynamic>{}),
        returnValueForMissingStub:
            _i5.Future<Map<dynamic, dynamic>>.value(<dynamic, dynamic>{}),
      ) as _i5.Future<Map<dynamic, dynamic>>);

  @override
  String composeFileName() => (super.noSuchMethod(
        Invocation.method(
          #composeFileName,
          [],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #composeFileName,
            [],
          ),
        ),
        returnValueForMissingStub: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #composeFileName,
            [],
          ),
        ),
      ) as String);

  @override
  _i5.Future<_i2.Locale> findDeviceLocale() => (super.noSuchMethod(
        Invocation.method(
          #findDeviceLocale,
          [],
        ),
        returnValue: _i5.Future<_i2.Locale>.value(_FakeLocale_0(
          this,
          Invocation.method(
            #findDeviceLocale,
            [],
          ),
        )),
        returnValueForMissingStub: _i5.Future<_i2.Locale>.value(_FakeLocale_0(
          this,
          Invocation.method(
            #findDeviceLocale,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Locale>);
}
